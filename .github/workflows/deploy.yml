
name: Deploy to DigitalOcean

# This workflow will run on every push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    # Run on an Ubuntu virtual machine
    runs-on: ubuntu-latest

    steps:
      # 1. This step is not strictly needed for this script but is good practice
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Connect to the server via SSH and execute commands
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        # Pass the secret as an environment variable to the action
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_CONTENT }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to the project folder
            cd ~/catering_project

            # Create .env.prod file on the server from the environment variable
            # The quotes around "$ENV_FILE" are crucial to preserve line breaks and special characters
            echo "$ENV_FILE" > .env.prod
            echo "âœ… .env.prod file created on server"
            
            # Stop old containers if they are running
            docker compose down
            echo "âœ… Old containers stopped"
            
            # Build and run new containers in the background
            docker compose --env-file .env.prod up --build -d
            echo "âœ… New containers built and started"
            
            # Apply database migrations
            # The -T flag disables pseudo-TTY allocation, which is necessary for non-interactive execution
            docker compose exec -T web python manage.py migrate --noinput
            echo "âœ… Database migrations applied"
            
            # Collect static files
            docker compose exec -T web python manage.py collectstatic --noinput --clear
            echo "âœ… Static files collected"
            
            # Clean up old, unused Docker images to save space
            docker image prune -f
            echo "âœ… Docker images pruned"
            
            echo "ðŸš€ Deployment finished successfully!"
