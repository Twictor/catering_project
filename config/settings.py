
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
DJANGO_SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
SECRET_KEY = DJANGO_SECRET_KEY
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DJANGO_DEBUG"))

ALLOWED_HOSTS = [*os.getenv("DJANGO_ALLOWED_HOSTS", default="").split(",")]


# Application definition

INSTALLED_APPS = [    
    'django.contrib.sites',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3-rd party
    "rest_framework",
    "rest_framework_simplejwt",
    "import_export",
    # local apps
    "catering",  
    "users",
    "admin_actions"     
]

SITE_ID = 1 

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'config.urls'  # Ensure this is correct

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "postgres"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
        "HOST": os.getenv("POSTGRES_HOST", "database"),  # Убедитесь, что здесь "database"
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# =====================================================================
# PROVIDER SETTINGS
# =====================================================================
KFC_PROVIDER_URL = os.getenv("KFC_PROVIDER_URL", "http://kfc-provider:8001")
SILPO_PROVIDER_URL = os.getenv("SILPO_PROVIDER_URL", "http://silpo-provider:8002")
UBER_PROVIDER_URL = os.getenv("UBER_PROVIDER_URL", "http://uber-provider:8003")
UKLON_PROVIDER_URL = os.getenv("UKLON_PROVIDER_URL", "http://uklon-provider:8004")


AUTH_USER_MODEL = "users.User"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10  # default page size for pagination    # ... other settings
    # Remove or comment out the following line if it exists and requires authentication
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
}

# client -> password + login
# server -> access token + refresh token

# client -> token + data
# server -> validate access token, get user by ID, process -> Response

# client -> refresh token
# server -> updated access token + refresh token

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=120),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": DJANGO_SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer", ),
}

# ... existing settings ...
ACTIVATION_KEY_EXPIRATION_TIME = 3600  # e.g., 1 hour
ACTIVATION_URL = "activate/"

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv("DJANGO_CACHE_URL", default="redis://cache:6379/0"),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'TIMEOUT': None,  # Записи в кэше живут вечно
    }
}

# Optionally, configure cache timeout
CACHE_TTL = 60 * 5  # 5 minutes

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv("DJANGO_EMAIL_HOST", default="mailing")
EMAIL_PORT = int(os.getenv("DJANGO_EMAIL_PORT", default=1025))
DEFAULT_FROM_EMAIL = 'from@example.com'


# =====================================================================
# CELERY SECTION
# =====================================================================
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://broker:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://broker:6379/1")
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'


CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600
}

# Celery Queues
from kombu import Queue

CELERY_TASK_QUEUES = (
    Queue('high_priority', routing_key='high_priority'),
    Queue('low_priority', routing_key='low_priority'),
)

CELERY_TASK_ROUTES = {
    'users.tasks.send_activation_email': {'queue': 'low_priority'},
    'catering.tasks.order_in_silpo': {'queue': 'high_priority'},
    'catering.tasks.order_in_kfc': {'queue': 'high_priority'},
}
